<!DOCTYPE html>
<html>
<head>
    <style>
        td {
            padding: 5px;
        }

        button {
            margin: 5px;
        }
    </style>
</head>
<body>
    <div class="form-inputs">
        <h2>Список пользователей</h2>
        <input type="hidden" id="id" />
        <div class="pair-input">
            <div class="first-in-pair">
                Имя:<br />
                <input id="accName"/>
                <p class="error-alert" id="errorName"></p>
            </div>
            <div class="second-in-pair">
                Фамилия:<br />
                <input id="accLastName" />
                <p class="error-alert" id="errorLastName"></p>
            </div>
        </div>

        <div class="pair-input">
            <div class="first-in-pair">
                Отчество:<br />
                <input id="accMiddleName" />
                <p class="error-alert" id="errorMiddleName"></p>
            </div>
            <div class="second-in-pair">
                Пол:<br />
                <input id="accGender" />
                <p class="error-alert" id="errorGender"></p>
            </div>
        </div>
        <div>
            Дата рождения:<br />
            <input id="accBirthday" type="date" />
            <p class="error-alert" id="errorBirthday"></p>
        </div>

        <div class="pair-input">
            <div class="first-in-pair">
                Электронная почта:<br />
                <input id="accEmail" type="email" />
                <p class="error-alert" id="errorEmail"></p>
            </div>
            <div class="second-in-pair">
                Телефон: <br />
                <input id="accPhoneRegistration" />
                <p class="error-alert" id="errorPhone"></p>
            </div>
        </div>
        <div>
            Пароль:<br />
            <input id="accHashPassword" type="password" />
            <p class="error-alert" id="errorPassword"></p>
        </div>
        <div>
            <button id="saveBtn" class="users-button">Сохранить</button>
            <button id="resetBtn" class="users-button">Сбросить</button>
            <button class="users-button" onclick="handleDelete()">Удалить запись</button>
        </div>
    </div>
    <table>
        <thead>
            <tr>
                <th>Имя</th>
                <th>Фамилия</th>
                <th>
                    Отчество
                </th>
                <th>
                    Пол
                </th>
                <th>
                    Дата рождения
                </th>
                <th>
                    Электронная почта
                </th>
                <th>
                    Телефон
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>

    <script>
        var addressApi = "/api/Accounts/";
        var regPhone = /^[+]?\d{11}$/;
        var regEmail = /[a-zA-Z0-9._-]+@@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+/;
        var regPassword = /(?=.*[0-9])(?=.*[!@@#$%^&*])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z!@@#$%^&*]{6,}/g;
        var regGender = /[мж]/;
        var selectedId;
        
        async function getAll() {
            const response = await fetch(addressApi, {
                method: "GET",
                headers: { "Accept": "application/json" }
            });
            if (response.ok === true) {
                const elements = await response.json();
                const rows = document.querySelector("tbody");
                elements.forEach(element => rows.append(row(element)));
            }
        }

        async function createOne(newItem) {
            console.log(newItem)

            const response = await fetch(`${addressApi}post`, {
                method: "POST",
                headers: { "Accept": "application/json", "Content-Type": "application/json" },
                body: JSON.stringify(newItem)
            });
            if (response.ok === true) {
                const itemRow = await response.json();
                document.querySelector("tbody").append(row(itemRow));
            }
            else {
                const error = await response.json();
                console.log(error.message);
            }
        }

        async function editOne(id, newData) {
            let newItem = {
                id
            }
            Object.assign(newItem, newData);
            const response = await fetch(`${addressApi}put/${id}`, {
                method: "PUT",
                headers: { "Accept": "application/json", "Content-Type": "application/json" },
                body: JSON.stringify(newItem)
            });
            if (response.ok === true) {
                document.querySelector(`tr[data-rowid='${id}']`).replaceWith(row(newItem));
            }
            else {
                const error = await response.json();
                console.log(error.message);
            }
        }

        function handleDelete() {
            if (selectedId) {
                deleteOne(selectedId);
            }
        }

        async function deleteOne(id) {
            const response = await fetch(`${addressApi}delete/${id}`, {
                method: "DELETE",
                headers: { "Accept": "application/json" }
            });
            if (response.ok === true) {
                document.querySelector(`tr[data-rowid='${id}']`).remove();
                selectedId = null;
                resetForm();
            }
            else {
                const error = await response.json();
                console.log(error.message);
            }
        }

        function selectRow(id) {
            getOne(id);
            if (selectedId) {
                document.querySelector(`tr[data-rowid='${selectedId}']`).className = "";
            }
            selectedId = id;
            document.querySelector(`tr[data-rowid='${id}']`).className = "selected-user";
        }

        function row(itemRow) {
            const tr = document.createElement("tr");
            tr.setAttribute("data-rowid", itemRow.id);
            tr.addEventListener("click", async () => await selectRow(itemRow.id));

            const nameTd = document.createElement("td");
            nameTd.append(itemRow.accName);
            tr.append(nameTd);

            const lastNameTd = document.createElement("td");
            lastNameTd.append(itemRow.accLastName);
            tr.append(lastNameTd);

            const middleNameTd = document.createElement("td");
            middleNameTd.append(itemRow.accMiddleName);
            tr.append(middleNameTd);

            const genderTd = document.createElement("td");
            genderTd.append(itemRow.accGender);
            tr.append(genderTd);

            const birhdayTd = document.createElement("td");
            birhdayTd.append(itemRow.accBirthday);
            tr.append(birhdayTd);

            const emailTd = document.createElement("td");
            emailTd.append(itemRow.accEmail);
            tr.append(emailTd);

            const phoneTd = document.createElement("td");
            phoneTd.append(itemRow.accPhoneRegistration);
            tr.append(phoneTd);

            return tr;
        }

        async function getOne(id) {
            const response = await fetch(`${addressApi}${id}`, {
                method: "GET",
                headers: { "Accept": "application/json" }
            });
            if (response.ok === true) {
                const itemRow = await response.json();
                document.getElementById("id").value = itemRow.id;
                document.getElementById("accName").value = itemRow.accName;
                document.getElementById("accLastName").value = itemRow.accLastName;
                document.getElementById("accMiddleName").value = itemRow.accMiddleName;
                document.getElementById("accGender").value = itemRow.accGender;
                document.getElementById("accBirthday").value = itemRow.accBirthday;
                document.getElementById("accEmail").value = itemRow.accEmail;
                document.getElementById("accPhoneRegistration").value = itemRow.accPhoneRegistration;
                document.getElementById("accHashPassword").value = ""; 
            }
            else {
                const error = await response.json();
                console.log(error.message);
            }
        }

        function resetForm() {
            document.getElementById("id").value = "";
            document.getElementById("accName").value = "";
            document.getElementById("accLastName").value = "";
            document.getElementById("accMiddleName").value = "";
            document.getElementById("accGender").value = "";
            document.getElementById("accBirthday").value = "";
            document.getElementById("accEmail").value = "";
            document.getElementById("accPhoneRegistration").value = "";
            document.getElementById("accHashPassword").value = "";
        }

        document.getElementById("resetBtn").addEventListener("click", () => resetForm());
        document.getElementById("saveBtn").addEventListener("click", async () => {
            var hasError = false;
            accName = document.getElementById("accName").value;
            accLastName = document.getElementById("accLastName").value;
            accMiddleName = document.getElementById("accMiddleName").value;
            accGender = document.getElementById("accGender").value;
            accBirthday = document.getElementById("accBirthday").value;
            accEmail = document.getElementById("accEmail").value;
            accPhoneRegistration = document.getElementById("accPhoneRegistration").value;
            accHashPassword = document.getElementById("accHashPassword").value;

            if (accName.length < 1) {
                document.getElementById("errorName").textContent = 'Введите имя';
                hasError = true;
            } else if (accName.length < 2) {
                document.getElementById("errorName").textContent = 'Имя не может состоять из одного символа';
                hasError = true;
            } else {
                document.getElementById("errorName").textContent = '';
            }

            if (accLastName.length < 1) {
                document.getElementById("errorLastName").textContent = 'Введите фамилию';
                hasError = true;
            } else if (accLastName.length < 2) {
                document.getElementById("errorLastName").textContent = 'Фамилия не может состоять из одного символа';
                hasError = true;
            } else {
                document.getElementById("errorLastName").textContent = '';
            }

            if (accMiddleName.length < 1) {
                document.getElementById("errorMiddleName").textContent = 'Введите отчество';
                hasError = true;
            } else if (accMiddleName.length < 2) {
                document.getElementById("errorMiddleName").textContent = 'Отчество не может состоять из одного символа';
                hasError = true;
            } else {
                document.getElementById("errorMiddleName").textContent = '';
            }

            if (!regGender.test(String(accGender).toLowerCase())) {
                document.getElementById("errorGender").textContent = 'Введите пол м/ж';
                hasError = true;
            } else {
                document.getElementById("errorGender").textContent = '';
            }

            let date = new Date(document.getElementById("accBirthday").value);
            let currentDate = new Date();
            let difference = Math.ceil(Math.abs(currentDate.getTime() - date.getTime()) / (1000 * 3600 * 24 * 365));
            if (date == 'Invalid Date') {
                document.getElementById("errorBirthday").textContent = 'Некорректная дата';
                hasError = true;
            } else if (difference < 14) {
                document.getElementById("errorBirthday").textContent = 'Вам должно быть минимум 14 лет';
                hasError = true;
            } else {
                document.getElementById("errorBirthday").textContent = '';
            }

            if (!regEmail.test(String(accEmail).toLowerCase())) {
                document.getElementById("errorEmail").textContent = 'Некорректный email';
                hasError = true;
            } else {
                document.getElementById("errorEmail").textContent = '';
            }

            if (!regPhone.test(String(accPhoneRegistration).toLowerCase())) {
                document.getElementById("errorPhone").textContent = 'Телефон должен состоять из 11 цифр';
                hasError = true;
            } else {
                document.getElementById("errorPhone").textContent = '';
            }

            if (!regPassword.test(accHashPassword)) {
                document.getElementById("errorPassword").textContent = 'Пароль должен содержать от 6 символов с использованием цифр, спец. символов, латиницы, наличием строчных и прописных букв';
                hasError = true;
            } else {
                document.getElementById("errorPassword").textContent = '';
            }

            if (hasError) {
                return;
            }

            const id = document.getElementById("id").value;
            const currentItem = {
                accName,
                accLastName,
                accMiddleName,
                accGender,
                accBirthday,
                accEmail,
                accPhoneRegistration,
                accHashPassword
            }
            if (id === "")
                await createOne(currentItem);
            else
                await editOne(id, currentItem);
            resetForm();
        });

        getAll();
    </script>
</body>
</html>